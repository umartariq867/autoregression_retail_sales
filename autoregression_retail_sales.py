# -*- coding: utf-8 -*-
"""Autoregression_retail_sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1miaVGONfgwMwdFIzGWLz8ZXeAmwjygfE
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.ar_model import AR
from sklearn.metrics import r2_score
# %matplotlib inline
# Customizing Matplotlib styple and size of graph 
plt.rcParams['figure.figsize']=(20,10)
plt.style.use('ggplot')

sales_data = pd.read_csv('retail_sales.csv')
# convert string date into date formate
sales_data['date']=pd.to_datetime(sales_data['date'])

# make the date column index
sales_data.set_index('date', inplace=True)

sales_data.head()

sales_data.plot()

#findout the trend and seasonality in your data 
decomposed = seasonal_decompose(sales_data['sales'], model='additive')
x =decomposed.plot() #See note below about this

sales_data['stationary']=sales_data['sales'].diff()

sales_data.head()

sales_data['stationary'].plot()

decomposed = seasonal_decompose(sales_data['stationary'].dropna(), model='additive')
x =decomposed.plot() #See note below about this

# pd.tools.plotting.lag_plot(sales_data['sales'])

#create train/test datasets
X = sales_data['stationary'].dropna()
print(len(X))
train_data = X[1:len(X)-11]
# start from 1 and total lenghth (71)-(20% of the data) 
test_data = X[X[len(X)-12:]]
print(len(train_data))
print(len(test_data))

#train the autoregression model
model = AR(train_data)
model_fitted = model.fit()

# print('The lag value chose is: %s' % model_fitted.k_ar)

print('The coefficients of the model are:\n %s' % model_fitted.params)

# # make predictions 
predictions = model_fitted.predict(
    start=len(train_data), 
    end=len(train_data) + len(test_data)-1, 
    dynamic=False)
 
# create a comparison dataframe for plotting graph
compare_df = pd.concat(
    [sales_data['stationary'].tail(12),
    predictions], axis=1).rename(
    columns={'stationary': 'actual', 0:'predicted'})

#plot the two values
compare_df.plot()

compare_df

compare_df.plot()

r2 = r2_score(sales_data['stationary'].tail(12), predictions)

r2

